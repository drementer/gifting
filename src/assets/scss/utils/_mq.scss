////
/// @group mq
////

/// @type map
/// @require {function} px2em
///
$breakpoints: (
  xs: px2em(360px),
  sm: px2em(576px),
  md: px2em(768px),
  lg: px2em(992px),
  xl: px2em(1200px),
  ul: px2em(1400px),
) !default;

/// Gets the media value from '$breakpoints'
///
/// @param {string} $value - Value to be taken
/// @require {variable} $breakpoints - Media sizes
/// @return {number} - Media value
/// @throw `$value` does not exist in `$breakpoints`
///
/// @access private
///
/// @example
///   @debug get-breakpoint(xl);
///     //-> 75em
///
@function get-breakpoint($value) {
  @if map-has-key($breakpoints, $value) {
    @return map-get($breakpoints, $value);
  } @else {
    @error $value + " does not exist in `$breakpoints`";
  }
}

/// The superpower of css @media queries.
///
/// @param {number} $until [null] - Entered max-width value
/// @param {number} $from [null] - Entered min-width value
///
/// @require {function} get-breakpoint - To pull the media value
/// @require {variable} $breakpoints - Media Sizes
///
/// @output {string} - Media query
///
@mixin mq($until: null, $from: null) {
  $max-width: null;
  $min-width: null;
  $media-query: '';

  @if $until {
    @if type-of($until) == number {
      @if unitless($until) {
        $max-width: $until + 'px';
      } @else {
        $max-width: $until;
      }
    } @else {
      $max-width: #{get-breakpoint($until)};
    }
  }

  @if $from {
    @if type-of($from) == number {
      @if unitless($from) {
        $min-width: $from + 'px';
      } @else {
        $min-width: $from;
      }
    } @else {
      $min-width: #{get-breakpoint($from)};
    }
  }

  @if $max-width and $min-width {
    $media-query: '(min-width: #{$min-width}) and (max-width: #{$max-width})';
  } @else if $max-width {
    $media-query: '(max-width: #{$max-width})';
  } @else if $min-width {
    $media-query: '(min-width: #{$min-width})';
  }

  @media screen and #{$media-query} {
    @content;
  }
}
